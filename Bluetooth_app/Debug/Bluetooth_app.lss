
Bluetooth_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000122  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000421  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015c  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036e  00000000  00000000  00000f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000132  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "UART.h"
int main(void)
{
	uint8_t received;
	SETBIT(DDRC,0);
  92:	a0 9a       	sbi	0x14, 0	; 20
	Uart_init();
  94:	0e 94 6a 00 	call	0xd4	; 0xd4 <Uart_init>

		received=Uart_Read();
		if (received=='1')
		{
			SETBIT(PORTC,0);
			Uart_Write_string("LED ON");
  98:	00 e6       	ldi	r16, 0x60	; 96
  9a:	10 e0       	ldi	r17, 0x00	; 0
		{
			CLRBIT(PORTC,0);
			Uart_Write_string("LED OFF");
		}
		else { 
			Uart_Write_string("Select proper option");
  9c:	cf e6       	ldi	r28, 0x6F	; 111
  9e:	d0 e0       	ldi	r29, 0x00	; 0
			Uart_Write_string("LED ON");
		}
		else if (received=='2')
		{
			CLRBIT(PORTC,0);
			Uart_Write_string("LED OFF");
  a0:	0f 2e       	mov	r0, r31
  a2:	f7 e6       	ldi	r31, 0x67	; 103
  a4:	ef 2e       	mov	r14, r31
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	ff 2e       	mov	r15, r31
  aa:	f0 2d       	mov	r31, r0
	SETBIT(DDRC,0);
	Uart_init();
    while(1)
    {

		received=Uart_Read();
  ac:	0e 94 75 00 	call	0xea	; 0xea <Uart_Read>
		if (received=='1')
  b0:	81 33       	cpi	r24, 0x31	; 49
  b2:	29 f4       	brne	.+10     	; 0xbe <main+0x2c>
		{
			SETBIT(PORTC,0);
  b4:	a8 9a       	sbi	0x15, 0	; 21
			Uart_Write_string("LED ON");
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 79 00 	call	0xf2	; 0xf2 <Uart_Write_string>
  bc:	f7 cf       	rjmp	.-18     	; 0xac <main+0x1a>
		}
		else if (received=='2')
  be:	82 33       	cpi	r24, 0x32	; 50
  c0:	29 f4       	brne	.+10     	; 0xcc <main+0x3a>
		{
			CLRBIT(PORTC,0);
  c2:	a8 98       	cbi	0x15, 0	; 21
			Uart_Write_string("LED OFF");
  c4:	c7 01       	movw	r24, r14
  c6:	0e 94 79 00 	call	0xf2	; 0xf2 <Uart_Write_string>
  ca:	f0 cf       	rjmp	.-32     	; 0xac <main+0x1a>
		}
		else { 
			Uart_Write_string("Select proper option");
  cc:	ce 01       	movw	r24, r28
  ce:	0e 94 79 00 	call	0xf2	; 0xf2 <Uart_Write_string>
  d2:	ec cf       	rjmp	.-40     	; 0xac <main+0x1a>

000000d4 <Uart_init>:
 *  Author: safifi
 */ 
#include "UART.h"
void Uart_init(){
	// baud rate
	UBRRL = 103;// baud rate 9600, F_CPU = 16Mhz
  d4:	87 e6       	ldi	r24, 0x67	; 103
  d6:	89 b9       	out	0x09, r24	; 9

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN) | (1<<TXEN); 
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)| (1<<UCSZ1)|(1<<UCSZ0); // 8 bit data transfer
  dc:	86 e8       	ldi	r24, 0x86	; 134
  de:	80 bd       	out	0x20, r24	; 32
}
  e0:	08 95       	ret

000000e2 <Uart_Write>:

void Uart_Write(uint8_t data){
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );  // check trans
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <Uart_Write>
	UDR = data;
  e6:	8c b9       	out	0x0c, r24	; 12
	
}
  e8:	08 95       	ret

000000ea <Uart_Read>:

uint8_t Uart_Read(){
	while ( !(UCSRA & (1<<RXC)) );
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <Uart_Read>
	return UDR;
  ee:	8c b1       	in	r24, 0x0c	; 12
}
  f0:	08 95       	ret

000000f2 <Uart_Write_string>:
void Uart_Write_string(uint8_t* str){
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	8c 01       	movw	r16, r24
	uint8_t i=0;
	while (str[i]!=0){
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	88 23       	and	r24, r24
 100:	51 f0       	breq	.+20     	; 0x116 <Uart_Write_string+0x24>
uint8_t Uart_Read(){
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}
void Uart_Write_string(uint8_t* str){
	uint8_t i=0;
 102:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i]!=0){
		Uart_Write(str[i]);
 104:	0e 94 71 00 	call	0xe2	; 0xe2 <Uart_Write>
		i++;
 108:	cf 5f       	subi	r28, 0xFF	; 255
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}
void Uart_Write_string(uint8_t* str){
	uint8_t i=0;
	while (str[i]!=0){
 10a:	f8 01       	movw	r30, r16
 10c:	ec 0f       	add	r30, r28
 10e:	f1 1d       	adc	r31, r1
 110:	80 81       	ld	r24, Z
 112:	88 23       	and	r24, r24
 114:	b9 f7       	brne	.-18     	; 0x104 <Uart_Write_string+0x12>
		Uart_Write(str[i]);
		i++;
	}
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
